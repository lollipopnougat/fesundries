(()=>{"use strict";var t={688:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t,e,a){this._id=t,this._text=e,this._onclick=a,this._instance=document.getElementById(this._id),console.log(this._instance),this.applyToInstance()}get id(){return this._id}set id(t){this._id=t}get text(){return this._text}set text(t){this._text=t}set onClick(t){this._onclick=t}applyToInstance(){this._instance.onclick=this._onclick,"<nope>"!=this._text&&(this._instance.innerText=this._text)}}},595:function(t,e,a){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(a(699)),i=s(a(576));class o{constructor(t){this.grid=[],this.isLeapYear=t=>t%3200!=0&&(t%100!=0||t%400==0)&&t%4==0,this.getMonthData=()=>{let t=this.MonthDays[this.currentLookMonth.getMonth()],e=this.currentLookMonth.getMonth()-1==-1?this.MonthDays[11]:this.MonthDays[this.currentLookMonth.getMonth()-1];this.currentLookMonth.setDate(1);let a=this.currentLookMonth.getDay()-1,s=[];for(let t=0;t<a;t++){let n={day:e-a+t+1,className:"last-month"};s.push(n)}for(let e=0;e<42-a;e++)if(e<t){let t={day:e+1,className:"this-month"};o.today.getDate()==e+1&&o.isToday(this.currentLookMonth)&&(t.className="today"),s.push(t)}else{let a={day:e-t+1,className:"next-month"};s.push(a)}return s},this.getThisMonth=()=>(this.currentLookMonth=o.copyDate(o.today),this.getMonthData()),this.getNextMonth=()=>(o.addMonth(this.currentLookMonth,1),this.getMonthData()),this.getLastMonth=()=>(o.addMonth(this.currentLookMonth,-1),this.getMonthData()),this.getCurrentMonthStr=()=>`${this.currentLookMonth.getFullYear()}年${this.currentLookMonth.getMonth()+1}月`,this.updateDate=()=>{o.today=new Date,this.currentLookMonth=new Date},this.MonthDays=[31,this.isLeapYear(t.getFullYear())?29:28,31,30,31,30,31,31,30,31,30,31],this.currentLookMonth=new Date}exportCalendar(t,e=0){const a=new n.default("calendar_wrapper",!0,"grid");a.innerHtml="";const s=o.weekdayName.map((t=>`<div class="cell weekday-title">${t}</div>`));let l;switch(e){case 1:l=this.getLastMonth();break;case 2:l=this.getNextMonth();break;default:l=this.getThisMonth()}s.push(...l.map((t=>`<div class="cell ${t.className}">${t.day}</div>`))),new i.default("calendar_title_month",this.getCurrentMonthStr()),a.innerHtml=s.join("")}}e.default=o,o.today=new Date,o.weekdayName=["一","二","三","四","五","六","日"],o.copyDate=t=>new Date(t.getTime()),o.addMonth=(t,e)=>{let a=t.getMonth(),s=t.getFullYear();for(a+=e;a>=12;)a-=12,s++;for(;a<0;)a+=12,s--;if(s<0)throw Error("没有更早的年份");t.setFullYear(s),t.setMonth(a)},o.isToday=t=>{let e=new Date;return t.getFullYear()==e.getFullYear()&&t.getMonth()==e.getMonth()}},186:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{static Format(t,e){const a={"y+":t.getFullYear(),"M+":t.getMonth()+1,"d+":t.getDate(),"h+":t.getHours(),"m+":t.getMinutes(),"s+":t.getSeconds(),"q+":Math.floor((t.getMonth()+3)/3),S:t.getMilliseconds()};for(const t in a){const s=new RegExp(`(${t})`),n=e.match(s);if(null!=n)if("y+"==t){const i=n[0].length;let o=`${a[t]}`;2==i&&(o=o.substr(2)),e=e.replace(s,o)}else e=e.replace(s,`00${a[t]}`.substr(`${a[t]}`.length))}return e}}},699:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t,e=!0,a="inline"){this._visiable=!0,this._id=t,this._visiable=e,this._display=a,this._instance=document.getElementById(this._id),console.log(this._instance),this.applyToInstance()}get id(){return this._id}set id(t){this._id=t}set innerHtml(t){this._instance.innerHTML=t}get visiable(){return this._visiable}set visiable(t){this._visiable=t,this.applyToInstance()}toggleVisiable(){this._visiable=!this._visiable,this.applyToInstance()}applyToInstance(){this._visiable?this._instance.style.display=this._display:this._instance.style.display="none",console.log(`vis = ${this._visiable}, ${this._instance.style.display}`)}}},576:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t,e){this._id=t,this._text=e,this._instance=document.getElementById(this._id),this.applyToInstance()}get id(){return this._id}set id(t){this._id=t}get text(){return this._text}set text(t){this._text=t,this.applyToInstance()}applyToInstance(){this._instance.innerText=this._text}}},820:function(t,e,a){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(a(688)),i=s(a(699)),o=s(a(576)),l=s(a(186)),r=s(a(595));e.default=class{constructor(){this.startMenu=new i.default("start_menu",!1,"block"),this.startButton=new n.default("start_btn","",(()=>{this.startMenu.toggleVisiable()})),this.calendarWrapper=new i.default("calendar",!1,"block"),this.calendarButton=new n.default("date_area","<nope>",(()=>{this.calendarWrapper.toggleVisiable(),console.log("cl")})),this.dateSpan=new o.default("date","2022/1/9"),this.timeSpan=new o.default("time","00:00:00"),this.calendarTimeSpan=new o.default("calendar_time","00:00:00"),this.calendarDateSpan=new o.default("calendar_date","2022年1月9日"),this.startClock(),this.calendar=new r.default(new Date),this.initCalendar(),this.calendarNextButton=new n.default("button_down","<nope>",(()=>{this.calendar.exportCalendar("calendar_wrapper",2)})),this.calendarLastButton=new n.default("button_up","<nope>",(()=>{this.calendar.exportCalendar("calendar_wrapper",1)}))}clockSync(){const t=new Date;this.dateSpan.text=`${t.getFullYear()}/${t.getMonth()+1}/${t.getDate()}`,this.timeSpan.text=l.default.Format(t,"hh:mm:ss")}startClock(){setInterval((()=>{const t=new Date;this.dateSpan.text=`${t.getFullYear()}/${t.getMonth()+1}/${t.getDate()}`;let e=l.default.Format(t,"hh:mm:ss");this.timeSpan.text=e,this.calendarTimeSpan.text=e,this.calendarDateSpan.text=`${t.getFullYear()}年${t.getMonth()+1}月${t.getDate()}日`}),1e3)}initCalendar(){this.calendar.exportCalendar("calendar_wrapper")}}},180:function(t,e,a){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),new(s(a(820)).default)}},e={};!function a(s){var n=e[s];if(void 0!==n)return n.exports;var i=e[s]={exports:{}};return t[s].call(i.exports,i,i.exports,a),i.exports}(180)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,